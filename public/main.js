'use strict';

var app = angular.module('Meaniscule', ['ui.router', 'ui.bootstrap']);

app.config(function ($urlRouterProvider, $locationProvider) {
   // This turns off hashbang urls (/#about) and changes it to something normal (/about)
   $locationProvider.html5Mode(true);
   // If we go to a URL that ui-router doesn't have registered, go to the "/" url.
   $urlRouterProvider.otherwise('/');
});
'use strict';

app.controller('HomeController', function ($state, $scope, $anchorScroll, TSP, QueryFactory, D3Factory, $location) {
      $scope.requestDone = false;

      $scope.sendQuery = function (query) {
            $scope.requestDone = true;
            $scope.loading = true;
            QueryFactory.sendQuery(query).then(function (response) {
                  console.log('back back back', response);
                  $scope.loading = false;
                  $scope.places = response;
                  QueryFactory.places = response;
                  $scope.length = response.length;
                  $location.hash('coordinates');
                  $anchorScroll();
                  // console.log('first set a coo', response[0].coordinates)
                  D3Factory.clearPlot();
            });
      };

      $scope.getDirections = function (locations) {
            // console.log('hit getDirections', locations)
            // var dataSet = locations.map(function(place){ return place.coordinates })
            var nn = TSP.nearestNeighbor(locations, locations[1].coordinates);
            D3Factory.clearPlot();
            $location.hash('map');
            $anchorScroll();
            D3Factory.showPlots(nn);
            // console.log('these is the output for shortest distance', nn)
      };
});
'use strict';

app.config(function ($stateProvider) {
    $stateProvider.state('home', {
        url: '/',
        templateUrl: '/app/home/home.html',
        controller: 'HomeController'
    });
});
"use strict";

app.directive("navbar", function () {
	return {
		restrict: "E",
		templateUrl: "/app/navbar/navbar.html"
	};
});
"use strict";

function NearestNeighbor(dataSet, startPoint) {
	this.dataSet = dataSet;
	this.startPoint = startPoint;
	this.nearestK;
	this.output = [];
}

NearestNeighbor.prototype.sortByX = function () {
	this.dataSet.sort(function (a, b) {
		return a[0] - b[0];
	});
	return this;
};

NearestNeighbor.prototype.getNearestK = function (k) {
	this.nearestK = this.dataSet.slice(0, k);
	return this;
};

NearestNeighbor.prototype.getNN = function () {
	var nearest = this.nextLocation();
	this.output.push(nearest);
	this.startPoint = nearest;
};

NearestNeighbor.prototype.nextLocation = function () {
	var sortedDistance = this.findDistance(this.nearestK);
	var idxOfNN = sortedDistance.shift().i;
	return this.dataSet.splice(idxOfNN, 1)[0];
};

NearestNeighbor.prototype.findDistance = function (arr) {
	var self = this;
	return arr.map(function (coo, idx) {
		var obj = {};
		obj.i = idx;
		obj.coordinates = coo;
		obj.distance = self.pythagorean(coo[0], coo[1]);
		return obj;
	}).sort(function (a, b) {
		return a.distance - b.distance;
	});
};

NearestNeighbor.prototype.pythagorean = function (lat, longi) {
	var startX = this.startPoint[0];
	var startY = this.startPoint[1];
	return Math.sqrt(Math.pow(startX - lat, 2) + Math.pow(startY - longi, 2));
};
'use strict';

var svg;
app.factory('D3Factory', function () {
	var polyLine;
	var map;
	return {
		clearPlot: function clearPlot() {
			console.log('IS IT CLEARING');
			if (svg) {
				map.removeLayer(polyLine);
				svg.selectAll('circle').remove();
			}
		},
		showPlots: function showPlots(dataSet) {
			// initialized map
			if (map) map.setView(dataSet[0].coordinates, 8);else {
				// doesn't
				map = L.map('map').setView(dataSet[0].coordinates, 8);
				var mapLink = '<a href="http://openstreetmap.org">OpenStreetMap</a>';
				L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
					attribution: '&copy; ' + mapLink + ' Contributors',
					maxZoom: 18
				}).addTo(map);
			}

			// Initialize the SVG layer
			map._initPathRoot();

			var test = dataSet.map(function (d) {
				return d.coordinates;
			});
			polyLine = L.polyline(test).addTo(map);

			// We pick up the SVG from the map object
			svg = d3.select("#map").select("svg");
			var g = svg.append("g");

			dataSet.forEach(function (d) {
				d.LatLng = new L.LatLng(d.coordinates[0], d.coordinates[1]);
			});

			var tooltip = d3.select("body").append("div").attr("class", "tooltip").style("opacity", 0);

			var feature = g.selectAll("circle").data(dataSet).enter().append("circle").style("stroke", "black").style("fill", "red").attr("r", 8).on("mouseover", function (d) {
				tooltip.transition().duration(200).style("opacity", .9);
				tooltip.html('<h5>Step: ' + d.step + '</h5><p>' + d.place + " - " + d.categories + '</p>').style("left", d3.event.pageX + 5 + "px").attr("fill", '#215BB8').style("top", d3.event.pageY - 28 + "px");
			}).on("mouseout", function (d) {
				tooltip.transition().duration(500).style("opacity", 0);
			});

			map.on("viewreset", update);
			update();

			function update() {
				feature.attr("transform", function (d) {
					return "translate(" + map.latLngToLayerPoint(d.LatLng).x + "," + map.latLngToLayerPoint(d.LatLng).y + ")";
				});
			}

			// var lat = dataSet.map(function(e){return e.coordinates[0]});
			// var long = dataSet.map(function(e){return e.coordinates[1]});
			// console.log('this be lat long arr', lat, long)

			// var xMax = Math.max.apply(null, lat); // height
			// var xMin = Math.min.apply(null, lat); // width
			// var yMax = Math.max.apply(null, long); // height
			// var yMin = Math.min.apply(null, long); // width

			// var w = 1800;
			// var h = 800;

			// // calculate max/min for x and y here if necessary
			// // var zoom = d3.behavior.zoom()
			// //  			.scaleExtent([1, 10])
			// //  			.on("zoom", zoomed);

			// var xScale = d3.scale.linear()
			//              .domain([xMin, xMax])
			//              .range([0,w]);

			// var yScale = d3.scale.linear()
			//              .domain([yMax, yMin])
			//              .range([0,h]);

			// svg = d3.select("#map")
			//     .append("svg")
			//     // .attr("width", w)
			//     // .attr("height",h)
			//     // .call(zoom)
			//     .append('svg:g')
			//     .attr('transform', 'translate(55,55)')
			//     .style("pointer-events", "all");

			// svg.selectAll("circle")
			//     .data(dataSet)
			//     .enter()
			//     .append("circle")
			//     .attr("cx", function(d) {
			//           return xScale(d.coordinates[0]);
			//     })
			//     .attr("cy", function(d) {
			//           return yScale(d.coordinates[1]);
			//     })
			//     .attr("r",4);

			// var xAxis = d3.svg.axis()
			//     .scale(xScale)
			//     .orient('bottom')
			//     .tickSize(1);

			// var yAxis = d3.svg.axis()
			//     .scale(yScale)
			//     .orient('left')
			//     .tickSize(1);

			// svg.selectAll('text')
			// 	.data(dataSet)
			// 	.enter()
			// 	.append('text')
			// 	.text(function(d){
			// 		return d.place + " - " + d.categories;
			// 	})
			// 	.attr("x", function(d) {
			// 	    return xScale(d.coordinates[0]);
			// 	})
			// 	.attr("y", function(d) {
			// 	   return yScale(d.coordinates[1]);
			// 	})
			// 	.attr("font-family", "sans-serif")
			// 				.attr("font-size", "11px")
			// 				.attr("fill", "red");

			// svg.append("svg:g")
			//     .attr("class", "xaxis")
			//     .attr("transform", "translate(0," + h + ")")
			//     .call(xAxis);

			// svg.append("svg:g")
			//     .attr("class", "yaxis")
			//     .call(yAxis);

			//    function zoomed() {
			// 	svg.attr("transform", "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")");
			// };
		}
	};
});
'use strict';

app.factory('TSP', function () {
	return {
		nearestNeighbor: function nearestNeighbor(coordinates, start) {
			var count = 0;

			function NearestNeighbor(dataSet, startPoint) {
				this.dataSet = dataSet;
				this.startPoint = startPoint;
				this.nearestK;
				this.output = [];
			}

			NearestNeighbor.prototype.sortByX = function () {
				this.dataSet.sort(function (a, b) {
					return a.coordinates[0] - b.coordinates[0];
				});
				return this;
			};

			NearestNeighbor.prototype.getNearestK = function (k) {
				this.nearestK = this.dataSet.slice(0, k);
				return this;
			};

			NearestNeighbor.prototype.getNN = function () {
				var nearest = this.nextLocation();
				count++;
				nearest.step = count;
				this.output.push(nearest);
				this.startPoint = nearest.coordinates;
			};

			NearestNeighbor.prototype.nextLocation = function () {
				var sortedDistance = this.findDistance(this.nearestK);
				var idxOfNN = sortedDistance.shift().i;

				return this.dataSet.splice(idxOfNN, 1)[0];
			};

			NearestNeighbor.prototype.findDistance = function (arr) {
				var self = this;
				return arr.map(function (coo, idx) {
					var obj = {};
					obj.i = idx;
					obj.coordinates = coo.coordinates;
					obj.distance = self.pythagorean(coo.coordinates[0], coo.coordinates[1]);
					return obj;
				}).sort(function (a, b) {
					return a.distance - b.distance;
				});
			};

			NearestNeighbor.prototype.pythagorean = function (lat, longi) {
				var startX = this.startPoint[0];
				var startY = this.startPoint[1];
				return Math.sqrt(Math.pow(startX - lat, 2) + Math.pow(startY - longi, 2));
			};

			var nn = new NearestNeighbor(coordinates, start);
			var len = coordinates.length;

			for (var i = 0; i < len; i++) {
				nn.sortByX().getNearestK(3).getNN();
			}
			return nn.output;
		}
	};
});
'use strict';

app.factory('QueryFactory', function ($http) {
	return {
		sendQuery: function sendQuery(string) {
			var query = string.replace(/\s+/g, "+");
			console.log('query', query);
			var self = this;
			return $http.get('/api/home/' + query).then(function (response) {
				// self.places = response.data;
				console.log('this is places in sendQuery', self.places);
				return response.data;
			});
		},
		places: null,
		coordinates: function coordinates() {
			return this.places.map(function (place) {
				return place.coordinates;
			});
		}
	};
});
'use strict';

app.directive('loader', function ($compile) {
    return {
        restrict: 'E',
        template: '<img src="/app/common/directives/loader/plane2.gif" />'
    };
});
//# sourceMappingURL=data:application/json;base64,
